plugins {
    id 'java'
}
dependencies {

    compileOnly project(':custom-generator')
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    jooqGenerator project(':custom-generator')
    jooqGenerator "org.jooq:jooq-meta-extensions:${jooqVersion}"

}
jooq {
    configurations {
        main {
            generationTool {
                generator {
                    database {
                        includes = '.*'
                        excludes = ''
                        forcedTypes {
                            forcedType {
                                userType = 'com.example.demo.enumeration.StatusEnum'
                                //converter = 'org.jooq.Converter.ofNullable(Integer.class, MyEnum.class, i -> MyEnum.values()[i], MyEnum::ordinal)'
                                enumConverter = true
                                //固定表
                                //includeExpression = "pf_test_t.event_status"
                                includeExpression = ".*\\.status"
                                includeTypes = '.*'
                            }
                        }
                    }
                    target {
                        packageName = 'com.example.demo.jooq'
                    }
                }
            }
        }
    }
}


/*jooq {
    configurations {
        main {
            generationTool {
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'nu.studer.sample.SampleGeneratorStrategy'  // use the custom generator strategy
                    }
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        includes = '.*'
                        excludes = ''
                        properties {
                            property {
                                key = 'scripts'
                                value = 'sql/database.sql'
                            }
                            property {
                                key = 'sort'
                                value = 'semantic'
                            }
                            property {
                                key = 'unqualifiedSchema'
                                value = 'none'
                            }
                            property {
                                key = 'defaultNameCase'
                                value = 'as_is'
                            }
                        }
                        forcedTypes {
                            forcedType {
                                userType = 'com.example.demo.enumeration.StatusEnum'
                                //converter = 'org.jooq.Converter.ofNullable(Integer.class, MyEnum.class, i -> MyEnum.values()[i], MyEnum::ordinal)'
                                enumConverter = true
                                //固定表
                                //includeExpression = "pf_test_t.event_status"
                                includeExpression = ".*\\.status"
                                includeTypes = '.*'
                            }
                        }
                    }
                    generate {
                        pojos = true
                        daos = true
                        springAnnotations = true
                        springDao = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'com.example.demo.jooq'
                        directory = "${buildDir}/generated/sources/annotationProcessor/java/main"
                    }
                }
            }
        }
    }
}*/
/*tasks.named('generateJooq').configure {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
}*/
