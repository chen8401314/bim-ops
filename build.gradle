buildscript {
    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            name = "shanghai"
            url = project.ext.repositoryUrl
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0")
        classpath("nu.studer:gradle-jooq-plugin:8.1")
    }
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven {
                allowInsecureProtocol = true
                name = "shanghai"
                url = project.ext.repositoryUrl
            }
            maven { url 'https://maven.aliyun.com/repository/public/' }
            maven { url 'https://maven.aliyun.com/repository/spring/' }
            maven { url 'https://maven.aliyun.com/repository/central/' }
            maven { url 'https://maven.aliyun.com/repository/google/' }
            maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
            maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
            mavenCentral()
        }
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.sonarqube"
    def webServiceProjects = ['user-service']
    if (webServiceProjects.contains(project.name)) {
        apply plugin: "nu.studer.jooq"
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 1, 'seconds'
            cacheDynamicVersionsFor 1, 'seconds'
        }
    }

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            name = "shanghai"
            url = project.ext.repositoryUrl
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
    }

    compileJava {
        options.fork = true
        options.encoding = "UTF-8"
    }

    compileTestJava {
        options.fork = true
        options.failOnError = true
        options.encoding = "UTF-8"
    }


    def profile = System.getProperty("profile") ?: "dev"


    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", "build/generated/sources/annotationProcessor/java/main"]
            }
            resources {
                srcDirs = ["src/main/resources", "src/main/profile/$profile"]
            }
        }
    }


    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }


    dependencies {
        implementation "org.apache.commons:commons-collections4:${commonsCollections4Version}"
        implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

        implementation "ch.qos.logback:logback-classic:${logbackVersion}"
        implementation "org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}"
        implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        implementation("io.jsonwebtoken:jjwt:${jjwtVersion}") {
            exclude group: "com.fasterxml.jackson.core"
        }
        implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


        implementation "de.codecentric:spring-boot-admin-starter-client:${springBootVersion}"
        implementation group: "com.google.guava", name: "guava", version: "${guavaVersion}", force: true
        //webService项目依赖
        if (webServiceProjects.contains(project.name)) {
            implementation project(":base-common")
            implementation project(":registry-client")
            annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        }
    }
    if (webServiceProjects.contains(project.name)) {
        jooq {
            configurations {
                main {
                    generationTool {
                        generator {
                            name = 'org.jooq.codegen.DefaultGenerator'
                            strategy {
                                name = 'nu.studer.sample.SampleGeneratorStrategy'  // use the custom generator strategy
                            }
                            database {
                                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                                includes = '.*'
                                excludes = ''
                                properties {
                                    property {
                                        key = 'scripts'
                                        value = 'sql/database.sql'
                                    }
                                    property {
                                        key = 'sort'
                                        value = 'semantic'
                                    }
                                    property {
                                        key = 'unqualifiedSchema'
                                        value = 'none'
                                    }
                                    property {
                                        key = 'defaultNameCase'
                                        value = 'as_is'
                                    }
                                }
                            }
                            generate {
                                pojos = true
                                daos = true
                                springAnnotations = true
                                springDao = true
                                javaTimeTypes = true
                            }
                            target {
                                directory = 'build/generated/sources/annotationProcessor/java/main'
                            }
                        }
                    }
                }
            }
        }
        tasks.named('generateJooq').configure {
            def out = new ByteArrayOutputStream()
            javaExecSpec = { JavaExecSpec s ->
                s.standardOutput = out
                s.errorOutput = out
                s.ignoreExitValue = true
                s.jvmArgs '-Xmx512M'
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

