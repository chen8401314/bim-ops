import java.util.concurrent.atomic.AtomicReference

buildscript {
    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            name = "shanghai"
            url = project.ext.repositoryUrl
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
        mavenCentral()
    }
}

plugins {
    id "org.springframework.boot" version "3.2.2"
    id "io.freefair.lombok" version "8.6"
    id "io.spring.dependency-management" version "1.1.4"
    id "org.sonarqube" version "4.4.1.3373"
    id "nu.studer.jooq" version "9.0"
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven {
                allowInsecureProtocol = true
                name = "shanghai"
                url = project.ext.repositoryUrl
            }
            maven { url 'https://maven.aliyun.com/repository/public/' }
            maven { url 'https://maven.aliyun.com/repository/spring/' }
            maven { url 'https://maven.aliyun.com/repository/central/' }
            maven { url 'https://maven.aliyun.com/repository/google/' }
            maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
            maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
            mavenCentral()
        }
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: "io.freefair.lombok"
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"

//    apply plugin: "jacoco"
//
//    jacoco {
//        toolVersion = "0.8.7"
//        reportsDir = file("$buildDir/customJacocoReportDir")
//    }
//    jacocoTestReport {
//        dependsOn test
//        group = "Reporting"
//        description = "Generate Jacoco coverage reports after running tests."
//        reports {
//            xml.enabled true
//            html.enabled true
//            //xml.destination file("${buildDir}/reports/jacoco.xml")
//        }
//        afterEvaluate {
//            getClassDirectories().setFrom(
//                    classDirectories.files.collect {
//                        fileTree(dir: it,
//                                include: ['com/**/service/*', 'com/**/util/*'])
//                    }
//            )
//        }
//    }
//    test {
//        useJUnitPlatform()
//        finalizedBy jacocoTestReport
//    }

    def webServiceProjects = ['user-service']
    if (webServiceProjects.contains(project.name)) {
        apply plugin: "nu.studer.jooq"
        apply plugin: "org.sonarqube"

        sonarqube {
            properties {
                property "sonar.sources", "src/main/java"
                property "sonar.sourceEncoding", "UTF-8"
            }
        }
//        tasks['sonarqube'].dependsOn(jacocoTestReport)
    }
    sourceCompatibility = project.javaSourceCompatibility
    targetCompatibility = project.javaTargetCompatibility


    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
         //   mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 1, 'seconds'
            cacheDynamicVersionsFor 1, 'seconds'
        }
    }

    repositories {
        mavenLocal()
        maven {
            allowInsecureProtocol = true
            name = "shanghai"
            url = project.ext.repositoryUrl
        }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
    }

    compileJava {
        options.fork = true
        options.encoding = "UTF-8"
    }

    compileTestJava {
        options.fork = true
        options.failOnError = true
        options.encoding = "UTF-8"
    }

    def profile = System.getProperty("profile") ?: "dev"
    processResources {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [profile: profile]
    }
    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", "build/generated/sources/annotationProcessor/java/main"]
            }
            resources {
                srcDirs = ["src/main/resources", "src/main/profile/$profile"]
            }
        }
    }


    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }


    dependencies {
        implementation "org.apache.commons:commons-collections4:${commonsCollections4Version}"
        implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

        implementation("io.jsonwebtoken:jjwt:${jjwtVersion}") {
            exclude group: "com.fasterxml.jackson.core"
        }
        implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation group: "com.google.guava", name: "guava", version: "${guavaVersion}"

        //webService项目依赖
        if (webServiceProjects.contains(project.name)) {
            implementation project(":common-service")

            compileOnly project(':custom-generator')
            jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
            jooqGenerator project(':custom-generator')
            jooqGenerator "org.jooq:jooq-meta-extensions:${jooqVersion}"
            annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        }
        testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    }
    if (webServiceProjects.contains(project.name)) {
        jooq {
            version = "$jooqVersion"
            configurations {
                main {
                    generationTool {
                        generator {
                            name = 'org.jooq.codegen.DefaultGenerator'
                            strategy {
                                name = 'nu.studer.sample.SampleGeneratorStrategy'
                                // use the custom generator strategy
                            }
                            database {
                                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                                includes = '.*'
                                excludes = ''
                                properties {
                                    property {
                                        key = 'scripts'
                                        value = 'sql/database.sql'
                                    }
                                    property {
                                        key = 'sort'
                                        value = 'semantic'
                                    }
                                    property {
                                        key = 'unqualifiedSchema'
                                        value = 'none'
                                    }
                                    property {
                                        key = 'defaultNameCase'
                                        value = 'lower'
                                    }
                                }
                            }
                            generate {
                                pojos = true
                                daos = true
                                springAnnotations = true
                                springDao = false
                                javaTimeTypes = true
                            }
                            target {
                                directory = 'build/generated/sources/annotationProcessor/java/main'
                            }
                        }
                    }
                }
            }
        }
        tasks.named('generateJooq').configure {
            // add additional JVM arguments
            javaExecSpec = { JavaExecSpec s ->
                s.jvmArgs '-Xmx512M'
            }
        }
    }

}

